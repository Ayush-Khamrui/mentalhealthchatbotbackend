from app.models.models import client

class GeminiChatbot:
    """
    A service class for interacting with the Gemini chatbot model.
    
    This class manages conversation history and communicates with the Gemini API
    to generate responses based on user prompts.
    """
    def __init__(self):
        """
        Initializes the GeminiChatbot instance.

        Sets up the Gemini client, model name, and initializes the conversation history.
        """
        self.client = client  # Use the singleton client from models.py
        self.model = "gemini-2.5-flash"
        self.history = []  # List of {"role": "user"/"model", "content": str}

    def chat(self, prompt: str) -> str:
        """
        Sends a user prompt to the Gemini model and returns the model's response.

        Args:
            prompt (str): The user's input message.

        Returns:
            str: The response generated by the Gemini model.
        """
        # Add user message to history
        self.history.append(prompt)

        # Prepare messages for Gemini API (list of strings)
        messages = self.history

        # Gemini API expects a list of strings for context
        response = self.client.models.generate_content(
            model=self.model,
            contents=messages
        )
        # Add model response to history
        self.history.append(response.text)
        return response.text

    def reset(self):
        """
        Resets the conversation history.
        """
        self.history = []

# Singleton instance
gemini_chatbot = GeminiChatbot()